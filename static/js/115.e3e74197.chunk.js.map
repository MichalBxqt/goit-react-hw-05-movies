{"version":3,"file":"static/js/115.e3e74197.chunk.js","mappings":"+MA6FA,UAxFe,WACb,IAAAA,GAAsCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA3CI,EAAWF,EAAA,GAAEG,EAAcH,EAAA,GAClCI,GAA0CL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA/CE,EAAaD,EAAA,GAAEE,EAAgBF,EAAA,GACtCG,GAAwBT,EAAAA,EAAAA,WAAS,GAAMU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAAhCE,EAAID,EAAA,GAAEE,EAAOF,EAAA,GACpBG,GAA0Bb,EAAAA,EAAAA,UAAS,MAAKc,GAAAZ,EAAAA,EAAAA,GAAAW,EAAA,GAAjCE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GACtBG,GAAkCjB,EAAAA,EAAAA,WAAS,GAAMkB,GAAAhB,EAAAA,EAAAA,GAAAe,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GACxBG,GAAWC,EAAAA,EAAAA,MACjBC,GAAwCC,EAAAA,EAAAA,MAAiBC,GAAAvB,EAAAA,EAAAA,GAAAqB,EAAA,GAAlDG,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GAoDpC,OArCAG,EAAAA,EAAAA,YAAU,WACJF,EAAaG,IAAI,WACnBT,GAAa,IACbU,EAAAA,EAAAA,IAAUJ,EAAaG,IAAI,SAAU,GAClCE,MAAK,SAAAC,GACJxB,EAAiBwB,EAAKC,QACxB,IACCC,OAAM,SAAAC,GACLnB,EAASmB,EACX,IACCC,SAAQ,WACPxB,GAAQ,GACRQ,GAAa,GACbhB,EAAe,GACjB,IAEN,GAAG,CAACsB,KAEJE,EAAAA,EAAAA,YAAU,WACJzB,GAAeA,EAAYkC,OAAS,GAAK1B,IAC3CS,GAAa,IACbU,EAAAA,EAAAA,IAAU3B,EAAa,GACpB4B,MAAK,SAAAC,GACJxB,EAAiBwB,EAAKC,QACxB,IACCC,OAAM,SAAAC,GACLnB,EAASmB,EACX,IACCC,SAAQ,WACPxB,GAAQ,GACRQ,GAAa,GACbhB,EAAe,GACjB,KAEJkC,QAAQC,IAAI,aACd,GAAG,CAAC5B,EAAMR,KAGRqC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,mBACJD,EAAAA,EAAAA,MAAA,QAAMG,SArDW,SAAAC,GACnBA,EAAMC,iBACF1C,GACFwB,EAAgB,CAAEmB,MAAO3C,IAE3BS,GAAQ,EACV,EA+CkCmC,OAAO,MAAKN,SAAA,EACxCC,EAAAA,EAAAA,KAAA,SACEM,KAAK,OACLC,YAAY,iCACZC,UAAQ,EACRC,SAlDa,SAAAP,GACnB,IAAQQ,EAAUR,EAAMS,OAAhBD,MACRhD,EAAegD,EACjB,EAgDQA,MAAOjD,KAETuC,EAAAA,EAAAA,KAAA,UAAQM,KAAK,SAAQP,SAAC,cAGd,MAAT1B,IAAiB2B,EAAAA,EAAAA,KAAA,KAAAD,SAAI1B,IACrBI,IAAauB,EAAAA,EAAAA,KAACY,EAAAA,EAAM,KACrBZ,EAAAA,EAAAA,KAAA,MAAAD,SACGlC,EAAcgD,KAAI,SAAAC,GAAK,OACtBd,EAAAA,EAAAA,KAAA,MAAAD,UACEC,EAAAA,EAAAA,KAACe,EAAAA,GAAI,CAACC,GAAE,GAAAC,OAAKH,EAAMI,IAAMC,MAAO,CAAEC,KAAMzC,GAAWoB,SAChDe,EAAMO,SAFFP,EAAMI,GAIV,QAKf,C","sources":["components/Movies/Movies.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport { getMovies } from '../../services/api';\nimport { Loader } from '../Loader/Loader';\n\nconst Movies = () => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  const [goit, setGoit] = useState(false);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const location = useLocation();\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const hendleSubmit = event => {\n    event.preventDefault();\n    if (searchQuery) {\n      setSearchParams({ query: searchQuery });\n    }\n    setGoit(true);\n  };\n\n  const hendleChange = event => {\n    const { value } = event.target;\n    setSearchQuery(value);\n  };\n\n  useEffect(() => {\n    if (searchParams.get('query')) {\n      setIsLoading(true);\n      getMovies(searchParams.get('query'), 1)\n        .then(data => {\n          setSearchResults(data.results);\n        })\n        .catch(err => {\n          setError(err);\n        })\n        .finally(() => {\n          setGoit(false);\n          setIsLoading(false);\n          setSearchQuery('');\n        });\n    }\n  }, [searchParams]);\n\n  useEffect(() => {\n    if (searchQuery && searchQuery.length > 0 && goit) {\n      setIsLoading(true);\n      getMovies(searchQuery, 1)\n        .then(data => {\n          setSearchResults(data.results);\n        })\n        .catch(err => {\n          setError(err);\n        })\n        .finally(() => {\n          setGoit(false);\n          setIsLoading(false);\n          setSearchQuery('');\n        });\n    }\n    console.log('SEARCH BTN');\n  }, [goit, searchQuery]);\n\n  return (\n    <div>\n      <h1>Search Movies</h1>\n      <form onSubmit={hendleSubmit} method=\"GET\">\n        <input\n          type=\"text\"\n          placeholder=\"type somethin for searching...\"\n          required\n          onChange={hendleChange}\n          value={searchQuery}\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n\n      {error != null && <p>{error}</p>}\n      {isLoading && <Loader />}\n      <ul>\n        {searchResults.map(movie => (\n          <li key={movie.id}>\n            <Link to={`${movie.id}`} state={{ from: location }}>\n              {movie.title}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Movies;\n"],"names":["_useState","useState","_useState2","_slicedToArray","searchQuery","setSearchQuery","_useState3","_useState4","searchResults","setSearchResults","_useState5","_useState6","goit","setGoit","_useState7","_useState8","error","setError","_useState9","_useState10","isLoading","setIsLoading","location","useLocation","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","useEffect","get","getMovies","then","data","results","catch","err","finally","length","console","log","_jsxs","children","_jsx","onSubmit","event","preventDefault","query","method","type","placeholder","required","onChange","value","target","Loader","map","movie","Link","to","concat","id","state","from","title"],"sourceRoot":""}